// <auto-generated />
using DataAccess.EntityContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.ContextSetup.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200721171938_InitialEntity")]
    partial class InitialEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DataAccess.Models.Marker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CurrentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<string>("NextId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real");

                    b.Property<string>("TourId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("NextId");

                    b.HasIndex("TourId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("DataAccess.Models.Panorama", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("Aphi")
                        .HasColumnType("real");

                    b.Property<float>("Ath")
                        .HasColumnType("real");

                    b.Property<float>("Bphi")
                        .HasColumnType("real");

                    b.Property<float>("Bth")
                        .HasColumnType("real");

                    b.Property<int>("ImageHqHeight")
                        .HasColumnType("integer");

                    b.Property<int>("ImageHqWidth")
                        .HasColumnType("integer");

                    b.Property<int>("ImageLqHeight")
                        .HasColumnType("integer");

                    b.Property<int>("ImageLqWidth")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real");

                    b.Property<int>("TileSizeX")
                        .HasColumnType("integer");

                    b.Property<int>("TileSizeY")
                        .HasColumnType("integer");

                    b.Property<string>("TourId")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Panoramas");
                });

            modelBuilder.Entity("DataAccess.Models.Tile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHq")
                        .HasColumnType("boolean");

                    b.Property<string>("PanoramaId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PanoramaId");

                    b.ToTable("Tiles");
                });

            modelBuilder.Entity("DataAccess.Models.Tour", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserGuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DataAccess.Models.Marker", b =>
                {
                    b.HasOne("DataAccess.Models.Panorama", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId");

                    b.HasOne("DataAccess.Models.Panorama", "Next")
                        .WithMany()
                        .HasForeignKey("NextId");

                    b.HasOne("DataAccess.Models.Tour", null)
                        .WithMany("Markers")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("DataAccess.Models.Panorama", b =>
                {
                    b.HasOne("DataAccess.Models.Tour", null)
                        .WithMany("Panoramas")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("DataAccess.Models.Tile", b =>
                {
                    b.HasOne("DataAccess.Models.Panorama", "Panorama")
                        .WithMany("Tiles")
                        .HasForeignKey("PanoramaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
